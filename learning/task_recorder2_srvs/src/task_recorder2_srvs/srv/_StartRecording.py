"""autogenerated by genpy from task_recorder2_srvs/StartRecordingRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import task_recorder2_msgs.msg

class StartRecordingRequest(genpy.Message):
  _md5sum = "051ab68fd5c4bb308007078efebe4301"
  _type = "task_recorder2_srvs/StartRecordingRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """task_recorder2_msgs/Description description

================================================================================
MSG: task_recorder2_msgs/Description
string SIDE_GRASP=side_grasp
string TOP_GRASP=top_grasp
string PLACING=placing
string RELEASING=releasing
string TURN_ON_DRILL=turn_on_drill
string DRILLING=drilling
string description
int32 id
int32 trial

"""
  __slots__ = ['description']
  _slot_types = ['task_recorder2_msgs/Description']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       description

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartRecordingRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.description is None:
        self.description = task_recorder2_msgs.msg.Description()
    else:
      self.description = task_recorder2_msgs.msg.Description()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.description.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.description.id, _x.description.trial))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.description is None:
        self.description = task_recorder2_msgs.msg.Description()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description.description = str[start:end].decode('utf-8')
      else:
        self.description.description = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.description.id, _x.description.trial,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.description.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i.pack(_x.description.id, _x.description.trial))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.description is None:
        self.description = task_recorder2_msgs.msg.Description()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description.description = str[start:end].decode('utf-8')
      else:
        self.description.description = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.description.id, _x.description.trial,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from task_recorder2_srvs/StartRecordingResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class StartRecordingResponse(genpy.Message):
  _md5sum = "c38703c1abcc0e14623ff82ac05c5f0d"
  _type = "task_recorder2_srvs/StartRecordingResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time start_time
string info
int32 return_code
int32 SERVICE_CALL_FAILED = 0
int32 SERVICE_CALL_SUCCESSFUL = 1

"""
  # Pseudo-constants
  SERVICE_CALL_FAILED = 0
  SERVICE_CALL_SUCCESSFUL = 1

  __slots__ = ['start_time','info','return_code']
  _slot_types = ['time','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_time,info,return_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StartRecordingResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.info is None:
        self.info = ''
      if self.return_code is None:
        self.return_code = 0
    else:
      self.start_time = genpy.Time()
      self.info = ''
      self.return_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.start_time.secs, _x.start_time.nsecs))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.return_code))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.start_time.secs, _x.start_time.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8')
      else:
        self.info = str[start:end]
      start = end
      end += 4
      (self.return_code,) = _struct_i.unpack(str[start:end])
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.start_time.secs, _x.start_time.nsecs))
      _x = self.info
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.return_code))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.start_time.secs, _x.start_time.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.info = str[start:end].decode('utf-8')
      else:
        self.info = str[start:end]
      start = end
      end += 4
      (self.return_code,) = _struct_i.unpack(str[start:end])
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_2I = struct.Struct("<2I")
class StartRecording(object):
  _type          = 'task_recorder2_srvs/StartRecording'
  _md5sum = '20e76d6a62a1a850e3a11754573cae27'
  _request_class  = StartRecordingRequest
  _response_class = StartRecordingResponse
